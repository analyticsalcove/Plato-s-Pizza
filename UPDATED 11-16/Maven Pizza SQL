USE pizza;
-- All datatypes were changed to appropriate types, for example some were text but needed to be varchar

SELECT * FROM 
	pizza.order_details; 
-- shows different pizza names and quantities ordered, 5941 rows, I changed DBM to make "order_details_id" a primary key & 
-- all columns non-null & "order_id" & "pizza_id" foreign keys
    
SELECT * FROM 
	pizza.orders; 
-- shows date & time of all 21,350 orders from 01/01/15-12/31/15, also I changed DBM to make "order_id" a primary key & all columns non-null
    
SELECT * FROM 
	pizza.pizza_types; 
-- there are 32 different types of pizzas, "pizza_type_id" was made into primary key & all columns changed to non-null in the DBM
    
 SELECT * FROM 
	pizza.pizzas; 
-- shows the size, type and price of each pizza, there are 96 kinds of pizzas (the 32 different types in 3 sizes each), "pizza_id" was made into 
-- a primary key & "pizza_type_id" was made a foreign key, all columns changed to non-null in the DBM
    
-- How many customers do we have each day? 
SELECT 
	date,
COUNT(order_id) AS customers_per_day
FROM 
	orders
GROUP BY 
	date;
-- shows the average customers for each day of 2015

-- How many customers do we average per day?
SELECT
	COUNT(order_id)/358 AS avg_daily_customers
FROM 
	orders;
-- average daily customers: 59.64


-- Are there any peak hours?
SELECT
	 left(time,2) AS hour,
     COUNT(order_id) AS customers_per_hour
  FROM 
	orders
 GROUP BY 
	left(time,2)
ORDER BY
    hour;

-- How many pizzas are typically in an order? 
SELECT 
    SUM(quantity)/COUNT(distinct order_id) AS typical_pizza_order_total
FROM 
    order_details;
-- 2.30 average pizzas per order

-- Highest to lowest pizzas by Quantity
SELECT 
	pizzas.pizza_type_id,
	SUM(order_details.quantity) AS sales 
FROM order_details 
LEFT JOIN pizzas 
ON order_details.pizza_id = pizzas.pizza_id 
GROUP BY pizzas.pizza_type_id 
ORDER BY sum(order_details.quantity) DESC;   
    
-- Highest to lowest pizzas by Revenue
SELECT 
	pizzas.pizza_type_id,
	SUM((order_details.quantity)*(pizzas.price)) AS sales 
FROM order_details 
LEFT JOIN pizzas 
ON order_details.pizza_id = pizzas.pizza_id 
GROUP BY pizzas.pizza_type_id 
ORDER BY SUM((order_details.quantity)*(pizzas.price)) DESC; 
    
-- How many pizzas did we make this year?
SELECT
	SUM(quantity)
FROM
	order_details;
-- 49,574 pizzas made in 2015
    
-- How many orders were placed this year?
SELECT
	COUNT(order_id)
FROM
	orders;
-- 21,350 pizzas made in 2015
    
-- Total Revenue: How much money did we make this year? 
SELECT
	SUM((order_details.quantity)*pizzas.price) AS yearly_earnings
FROM 
	order_details
LEFT JOIN pizzas 
ON order_details.pizza_id = pizzas.pizza_id;
-- $817,860 total revenue

-- How much money did we make per pizza? Average price per pizza:
SELECT
	SUM(quantity*price)/SUM(order_details.quantity) AS price_per_pizza
FROM order_details 
LEFT JOIN pizzas 
ON order_details.pizza_id = pizzas.pizza_id; 
-- average pizza price was $16.44
	
-- Count of variety of pizzas
SELECT
	COUNT(DISTINCT(name))
FROM
	pizza_types;
-- 32 types of pizzas are sold
    
-- Orders by pizza size
SELECT
	size, SUM(quantity)
FROM
	pizzas
JOIN
	order_details
ON pizzas.pizza_id = order_details.pizza_id
GROUP BY 
	size
ORDER BY
	size;
    
-- Dates with most orders
SELECT
	date, SUM(quantity) 
FROM
	orders
JOIN
	order_details
ON orders.order_id=order_details.order_id
GROUP BY
	date
ORDER BY
	SUM(quantity) DESC;
